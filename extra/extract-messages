#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Extract Messages
    ~~~~~~~~~~~~~~~~

    Extract messages into a PO-Template.

    :copyright: 2009-2010 by the Inyoka Team, see AUTHORS for more details.
    :license: BSD, see LICENSE for more details.
"""
from os import path, makedirs
from optparse import OptionParser
from werkzeug import import_string
from babel.messages import Catalog
from babel.messages.extract import extract_from_dir
from babel.messages.pofile import write_po
import inyoka


KEYWORDS = {
    '_': None,
    'gettext': None,
    'ngettext': (1, 2),
    'lazy_gettext': None,
    'lazy_ngettext': (1, 2)
}
BUGS_ADDRESS = ''
COPYRIGHT = 'The Inyoka Team'
METHODS = [
    ('**.py', 'python'),
    ('**.html', 'jinja2'),
    ('**.js', 'javascript'),
]
COMMENT_TAGS = ['_']


def strip_path(filename, base):
    filename = path.normpath(path.join(base, filename))
    return filename[len(path.commonprefix([
        filename, path.dirname(base)])):].lstrip(path.sep)


def main():
    global parser
    parser = OptionParser(usage='%prog [module]')
    options, args = parser.parse_args()

    print 'Extracting core strings'

    modules = ('wtforms', 'inyoka')
    root = path.abspath(path.join(*inyoka.__path__))
    catalog = Catalog(msgid_bugs_address=BUGS_ADDRESS,
                      copyright_holder=COPYRIGHT, charset='utf-8')
    for module in modules:
        modpath = path.abspath(path.join(*import_string(module).__path__))

        def callback(filename, method, options):
            if method != 'ignore':
                print strip_path(filename, modpath)

        extracted = extract_from_dir(modpath, METHODS, {}, KEYWORDS,
                                     COMMENT_TAGS, callback=callback,
                                     strip_comment_tags=True)

        for filename, lineno, message, comments in extracted:
            catalog.add(message, None, [(strip_path(filename, modpath), lineno)],
                        auto_comments=comments)

    output_path = path.join(root, 'i18n')
    if not path.isdir(output_path):
        makedirs(output_path)

    f = file(path.join(output_path, 'messages.pot'), 'w')
    try:
        write_po(f, catalog, width=79)
    finally:
        f.close()

    print 'All done.'


if __name__ == '__main__':
    main()
